Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Звіт
до практичного завдання №1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду на Ruby»







Виконав:
ст. гр. ПЗПІ-23-9
Кадигроб Тимофій Андрійович
	                     Перевірив:
                     ст. викладач кафедри ПІ
                     Сокорчук Ігор Петрович	






Харків 2025
1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	28.10.2025	0.1	Початкова версія документу.
2	29.10.2025	0.2	Додано приклади коду та пояснення.
3	30.10.2025	1.0	Оформлено остаточний варіант звіту.
































2 ЗАВДАННЯ
Ознайомитись із правилами оформлення програмного коду мовою Ruby, дослідити основні рекомендації щодо написання чистого, підтримуваного коду та продемонструвати приклади з поясненням.






















 
3 ОПИС ВИКОНАНОЇ РОБОТИ
3.1 Вибір мови програмування 
Для доповіді обрано мову програмування Ruby. Її основним завданням є підвищення продуктивності розробника та забезпечення простоти та гнучкості написання коду. Ruby є промисловим стандартом для створення веб-додатків та широко використовується у фреймворку Ruby on Rails, а також у сферах DevOps та автоматизації завдань.
 
3.2 Вступ
Мова програмування Ruby є динамічною, інтерпретованою та повністю об’єктно-орієнтованою. Вона була створена з метою зробити процес розробки програмного забезпечення більш природним і зрозумілим для людини. Ruby поєднує простоту синтаксису з гнучкістю побудови програм, що дозволяє розробникам писати чистий, логічно структурований і легкий для розуміння код. Основна ідея мови полягає в тому, щоб програміст міг зосередитися на вирішенні задачі, а не на технічних деталях синтаксису. Саме тому Ruby широко використовується в навчанні, стартапах та веброзробці, зокрема у фреймворку Ruby on Rails. У межах даної роботи було проаналізовано основні правила оформлення програмного коду мовою Ruby. Метою є вивчення рекомендацій, які сприяють підвищенню якості, зрозумілості та підтримуваності програм. Також було наведено приклади дотримання та порушення цих правил із поясненням їх впливу на зручність читання, тестування та подальший розвиток програмного продукту.

3.3 Основні рекомендації для написання чистого коду в Ruby

3.3.1 Рекомендація 1: Використовуйте зрозумілі імена змінних та методів
Пояснення:
Ruby активно використовується в командах, тому імена мають бути інтуїтивно зрозумілими. Уникайте коротких назв без контексту.
1.	# Поганий приклад
2.	def c(a, b)
3.	  a + b
4.	end
5.	
6.	# Гарний приклад
7.	def calculate_total(price, tax)
8.	  price + tax
9.	end

3.3.2 Рекомендація 2: Дотримуйтесь відступів і форматування (2 пробіли замість табів)
Пояснення:
Ruby Style Guide [1] рекомендує 2 пробіли для кожного рівня вкладеності. Це підвищує читабельність.
1.	# Поганий приклад
2.	def greet
3.	    puts "Hello!"
4.	end
5.	
6.	# Гарний приклад
7.	def greet
8.	  puts "Hello!"
9.	end

3.3.3 Рекомендація 3: Використовуйте інтерполяцію рядків замість конкатенації
Пояснення:
Інтерполяція (#{}) читається краще та працює швидше.
1.	# Поганий приклад
2.	name = "John"
3.	puts "Hello, " + name + "!"
4.	
5.	# Гарний приклад
6.	name = "John"
7.	puts "Hello, #{name}!"

3.3.4 Рекомендація 4: Уникайте зайвих умовних конструкцій — використовуйте guard clauses
Пояснення:
Замість вкладених if краще одразу повертати результат, якщо умова не виконується.
# Поганий приклад
def process(user)
  if user
    if user.active?
      puts "Processing..."
    end
  end
end

# Гарний приклад
def process(user)
  return unless user&.active?
  puts "Processing..."
end

3.3.5 Рекомендація 5: Використовуйте символи замість рядків там, де можливо
Пояснення:
Символи (:name) займають менше пам’яті та швидше порівнюються, ніж рядки.
1	# Поганий приклад
2	status = "active"
3	
4	# Гарний приклад
5	status = :active

3.3.6 Рекомендація 6: Коментуйте лише складну логіку
Пояснення:
Код має бути самодокументований. Коментарі потрібні тільки для нетривіальних рішень.
1	# Надлишковий коментар
2	# This function prints hello
3	def greet
4	  puts "Hello"
5	end
6	
7	# Коментар лише для складних випадків
8	# Caches the user’s profile data for faster access
9	def cache_user_profile(user)
10	  @cache[user.id] = user.profile_data
11	end

3.3.7 Рекомендація 7: Використовуйте Ruby-конвенції (snake_case, PascalCase)
Пояснення:
Методи і змінні — snake_case
Класи і модулі — PascalCase
1	# Погано
2	class userData
3	end
4	
5	# Добре
6	class UserData
7	end


3.3.8 Рекомендація 8: Уникайте дублювання коду — DRY (Don’t Repeat Yourself)
Пояснення:
Якщо код повторюється — виділи його в метод.
1	# Поганий приклад
2	puts "Welcome, #{user.name}!"
3	puts "Your role is #{user.role}"
4	
5	# Гарний приклад
6	def display_user_info(user)
7	  puts "Welcome, #{user.name}!"
8	  puts "Your role is #{user.role}"
9	end

3.3.9 Рекомендація 9: Використовуйте блоки, ітератори та методи вищого порядку
Пояснення:
Ruby має потужні ітератори (each, map, select) — краще використовувати їх замість ручних циклів.
1	# Поганий приклад
2	for i in [1, 2, 3]
3	  puts i
4	end
5	
6	# Гарний приклад
7	[1, 2, 3].each { |i| puts i }













     4 ВИСНОВКИ
У результаті виконання практичного завдання було узагальнено основні принципи написання якісного та підтримуваного програмного коду мовою Ruby, що дозволяють забезпечити високу читабельність, ефективність і стабільність програмних рішень.
Основні висновки:
•	було розглянуто базові рекомендації з оформлення коду відповідно до стандартів Ruby Style Guide;
•	проаналізовано типові помилки, які знижують якість коду, та наведено приклади їх виправлення;
•	відпрацьовано практичні навички застосування правил іменування, форматування та структуризації програмного коду;
•	показано вплив дотримання стилістичних вимог на зручність подальшого тестування, розширення та підтримки проєкту;
•	закріплено розуміння важливості рефакторингу як складової процесу підвищення якості програмного забезпечення.
Таким чином, виконана робота сприяла формуванню практичного розуміння того, як принципи чистого коду й структурного оформлення безпосередньо впливають на ефективність розробки та життєвий цикл програмних систем.











   5 ВИКОРИСТАНІ ДЖЕРЕЛА

1.	Ruby Style Guide. Ruby Style Guide. URL: https://rubystyle.guide/ (дата звернення: 30.10.2025). [1]
2.	Refactoring. martinfowler.com. URL: https://martinfowler.com/books/refactoring.html?utm_source=chatgpt.com (date of access: 30.10.2025).
3.	Ruby Style Guide. Ruby Style Guide. URL: https://rubystyle.guide/ (дата звернення: 30.10.2025).
4.	Practical Object-Oriented Design in Ruby. Practical Object-Oriented Design in Ruby. URL: https://www.poodr.com/?utm_source=chatgpt.com (дата звернення: 30.10.2025).
5.	GitHub - rubocop/ruby-style-guide: A community-driven Ruby coding style guide. GitHub. URL: https://github.com/rubocop/ruby-style-guide (дата звернення: 30.10.2025). 















                                                ДОДАТОК А
Відеозапис
Відеозапис доповіді: https://youtu.be/XRzK9a4gpjE

00:00 - Початок
00:05 - Вступ
00:27 - Рекомендація 1
00:59 - Рекомендація 2
01:27 - Рекомендація 3
01:53 - Рекомендація 4
02:15 - Рекомендація 5
02:34 - Рекомендація 6
03:00 - Рекомендація 7
03:19 - Рекомендація 8
03:44 - Рекомендація 9
04:12 - Висновки














                                              ДОДАТОК Б
Слайди презентації
 
          Рисунок Б.1 — Титульна сторінка

 
                                       Рисунок Б.2 — Вступ

 
                                       Рисунок Б.3 — Рекомендація 1

 
                                       Рисунок Б.4 — Рекомендація 2

 
                                       Рисунок Б.5 — Рекомендація 3

 
                                       Рисунок Б.6 — Рекомендація 4

 
                                       Рисунок Б.7 — Рекомендація 5

 
                                       Рисунок Б.8 — Рекомендація 6

 
Рисунок Б.9 — Рекомендація 7

 
Рисунок Б.10 — Рекомендація 8

 
                                     Рисунок Б.11 — Рекомендація 9

 
 	                                  Рисунок Б.12 — Висновок





     ДОДАТОК В
Програмний код
GitHub repository: https://github.com/NureKadyhrobTymofii/ark-pzpi-23-9-kadyhrob-tymofii/blob/main/Pract1/pzpi-23-9-kadyhrob-tynofii-pract1/Pract1.rb

